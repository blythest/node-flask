{
  "author": {
    "name": "Thiago de Arruda",
    "email": "tpadilha84@gmail.com"
  },
  "name": "flask-router",
  "version": "0.0.4",
  "description": "Flask-inspired routing system for node and connect.\nNice if you just need a routing system without depending on connect, or need routing middleware without all features provided by express.",
  "main": "./lib/router.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/tarruda/node-flask-router.git"
  },
  "keywords": [
    "connect",
    "flask",
    "werkzeug",
    "routing",
    "router",
    "routers",
    "dispatch",
    "request"
  ],
  "license": "BSD",
  "devDependencies": {
    "coffee-script": "1.3.3",
    "connect": "*",
    "should": "*",
    "mocha": "*"
  },
  "optionalDependencies": {
    "connect": "*"
  },
  "engines": {
    "node": "*"
  },
  "readme": "## flask-router\n\n  Routing system for node.js/connect based on Flask(http://flask.pocoo.org/).\n\n#### Installation\n\n```sh\nnpm install flask-router\n```\n\n#### Usage\n\n```js\nvar http = require('http')\n  , router = require('flask-router')()\n  , server = http.createServer(router.route);\n```\n\n  It can also be used as a connect/express middleware:\n  \n```js\nvar connect = require('connect')\n  , app = connect()\n  , router = require('flask-router')()\n  , app.use(router.route);\n```\n \n  Then routes can be added like this:\n  \n```js\nrouter.get('/users/<str(max=5,min=2):id>', function (req, res) {\n  console.log(req.params.id);\n  res.end();\n});\n\nrouter.post('/users/<str(len=7):id>', function (req, res) {\n  console.log(req.params.id);\n  res.end();\n});\n\nrouter.put('/customers/<id>', function (req, res) {\n  console.log(req.params.id);\n  res.end();\n});\n```\n\n  Can assign multiple handler functions to the same rule:\n\n```js\nrouter.get('/get/<uuid:id>'\n, function(req, res, next) {\n  res.write('part1');\n  next();\n}, function(req, res, next) {\n  res.write('part2');\n  next();\n});\n\nrouter.get('/get/<uuid:id>', function(req, res) {\n  res.write('part3');\n  res.end();\n});\n// All three handlers will be executed when the url match, so the final\n// response will be 'part1part2part3'\n```\n\n  Custom parameter parsers can be registered(these are known as 'converters'\n  in Flask/Werkzeug): \n\n```js\nrouter.registerParser('query', function(str) {\n  var rv = {};\n    , queryParams = str.split('/')\n    , i, len, kv, key, value;\n  for (i = 0, len = queryParams.length; i < len; i++) {\n    param = queryParams[i];\n    kv = param.split('=');\n    key = kv[0], value = kv[1];\n    rv[key] = value;\n  }\n  return rv;\n});\n\nrouter.get('/queryable/<query:q>', function(req, res) {\n  console.log(JSON.stringify(req.params.q));\n  res.end();\n});\n// If '/queryable/gt=5/lt=10/limit=20' was requested,\n// the output would be {\"limit\":\"20\",\"gt\":\"5\",\"lt\":\"10\"}\n```\n\n  Can be used to write middlewares, just like express routes:\n\n```js\n// anyone can access public files\nrouter.get('/public/<path:file>', function(req, res) {\n  res.write(req.params.file);\n  res.end();\n});\n\n// will match any path that starts with /private\nrouter.all('/private/<path:path>', function(req, res, next) {\n  if (req.headers['x-user']) {\n    req.loggedIn = true;\n    next('route');\n  } else {\n    next();\n  }\n});\nrouter.all('/private/<path:path>', function(req, res) {\n  res.writeHead(401); // not authorized\n  res.end();\n});\n\n// the next two handlers will only be executed if the user is\n// authorized(in this case, the request must have x-user header)\nrouter.post('/private/addpost/<title>', function(req, res) {\n  // req.loggedIn === true\n  res.write('post added'));\n  res.end();\n});\n\nrouter.get('/private/posts', function(req, res) {\n  // req.loggedIn === true\n  res.write(db.query('posts')');\n  res.end();\n});\n```\n\n  RegExps can also be used as rules:\n\n```js\nrouter.get(/^\\/posts\\/(\\d+)/i, function(req, res) {\n  // Will match /posts/5 or /POSTs/32422\n  // captured text can be accessed by index on req.params\n  console.log('Id:', req.params[0])\n  res.end()\n})\n```\n\n  See tests for more examples.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tarruda/node-flask-router/issues"
  },
  "homepage": "https://github.com/tarruda/node-flask-router",
  "dependencies": {
    "connect": "*"
  },
  "_id": "flask-router@0.0.4",
  "dist": {
    "shasum": "77b3926fcf698765c0fad0a41d88865137f27f25"
  },
  "_from": "flask-router@",
  "_resolved": "https://registry.npmjs.org/flask-router/-/flask-router-0.0.4.tgz"
}
